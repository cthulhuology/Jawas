#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "jsapi.h"

static          JSBool
Print(JSContext * cx, JSObject * obj, uintN argc, jsval * argv, jsval * rval)
{
	uintN           i;
	JSString       *str;

	for (i = 0; i < argc; ++i) {
		str = JS_ValueToString(cx, argv[i]);
		if (!str)
			return JS_FALSE;
		fprintf(stdout, "%s%s", i ? " " : "", JS_GetStringBytes(str));
	}
	fputc('\n', stdout);
	return JS_TRUE;
}

static JSFunctionSpec my_functions[] = {
	{"print", Print, 0},
	{0},
};

int 
main(int argc, char **argv)
{
	char           *script = "print(\"hello world\",'thou art a','devil'); print('this is only a test');";
	JSBool          ok;
	JSString       *str;
	JSRuntime      *rt;
	JSContext      *cx;
	JSObject       *glob;
	JSBool          builtins;
	jsval           retval;
	JSClass         global_class = {
		"global", 0,
		JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_PropertyStub,
		JS_EnumerateStub, JS_ResolveStub, JS_ConvertStub, JS_FinalizeStub
	};

	rt = JS_NewRuntime(8L * 1024L * 1024L);
	if (!rt)
		return 1;

	cx = JS_NewContext(rt, 8192);
	if (cx == NULL)
		return 1;

	glob = JS_NewObject(cx, &global_class, NULL, NULL);

	builtins = JS_InitStandardClasses(cx, glob);

	if (!JS_DefineFunctions(cx, glob, my_functions))
		return 1;

	ok = JS_EvaluateScript(cx, glob, script, strlen(script), "test.c", 1, &retval);
	str = JS_ValueToString(cx, retval);
	fprintf(stderr, "result: %s\n", JS_GetStringBytes(str));

	JS_DestroyContext(cx);
	JS_DestroyRuntime(rt);
	JS_ShutDown();

	return 0;
}
